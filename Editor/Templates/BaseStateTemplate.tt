<#@ template language="C#" #>
<#@ include file="Includes.ttinclude"#>
using System;
using BrunoMikoski.ScriptableObjectCollections;
using TNRD.StateManagement.Contracts;
using UnityEngine;
using <#= Namespace #>.Contracts;

namespace <#= Namespace #>.Base
{
    public abstract class <#= BaseStateName #> : IState
    {
        protected <#= StateMachineInterfaceName #> StateMachine { get; private set; }
        
        /// <inheritdoc />
        public abstract ScriptableObjectCollectionItem StateId { get; }

        protected <#= BaseStateName #>(<#= StateMachineInterfaceName #> stateMachine)
        {
            StateMachine = stateMachine;
        }

        /// <inheritdoc />
        void IState.OnEnter()
        {
            try
            {
                OnEnter();
            }
            catch(Exception e)
            {
                Debug.LogError($"Exception during OnEnter of State '{StateId}'");
                Debug.LogException(e);
            }
        }

        /// <inheritdoc />
        void IState.OnExit()
        {
            try
            {
                OnExit();
            }
            catch(Exception e)
            {
                Debug.LogError($"Exception during OnExit of State '{StateId}'");
                Debug.LogException(e);
            }
        }

        protected abstract void OnEnter();
        protected abstract void OnExit();
    }
}

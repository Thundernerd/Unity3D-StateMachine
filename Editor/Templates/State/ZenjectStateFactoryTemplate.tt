<#@ template language="C#" #>
<#@ include file="../Includes.ttinclude"#>
using System;
using TNRD.StateManagement.Contracts;
using <#= Namespace #>.Contracts;
using <#= Namespace #>.Utilities;
using Zenject;

namespace <#= Namespace #>.Factories
{
    public class <#= StateFactoryName #> : <#= StateFactoryInterfaceName #>
    {
        [Inject] private <#= SubContainerManagerName #> subContainerManager;

        /// <inheritdoc />
        void IStateFactory.Initialize(IStateMachine stateMachine)
        {
            // Left empty on purpose
        }

        /// <inheritdoc />
        IState IStateFactory.Instantiate(Enum stateId, Type stateType)
        {
            return (IState)subContainerManager.GetContainer(stateId).Instantiate(stateType);
        }
    }
}
